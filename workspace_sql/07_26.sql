
-- 아래 내용을 새로운(아무 내용도 없는) 쿼리 탭에 복사 후 F9 클릭. 그럼 알아서 실행 됨


DROP TABLE board_reply;
DROP TABLE board;
DROP TABLE board_member;

-- 회원정보
-- USER : 일반회원
-- ADMIN : 관리자
CREATE TABLE BOARD_MEMBER (
	MEM_ID VARCHAR(50) PRIMARY KEY
	, MEM_PW VARCHAR(50) NOT NULL
	, MEM_NAME VARCHAR(50) NOT NULL
	, GENDER VARCHAR(10) -- 'male', 'female'
	, MEM_ROLE VARCHAR(20) DEFAULT 'USER' 
);

-- 임시 회원 데이터
INSERT INTO board_member (MEM_ID, MEM_PW, MEM_NAME, GENDER, MEM_ROLE) 
VALUES ('admin', '1111', '김자바', 'male', 'USER');
INSERT INTO board_member (MEM_ID, MEM_PW, MEM_NAME, GENDER, MEM_ROLE) 
VALUES ('admin', '1111', '관리자', 'female', 'ADMIN');
SELECT * FROM board_member;
-- 게시판 (회원만 게시글 작성 가능)
CREATE TABLE BOARD (
	BOARD_NUM INT AUTO_INCREMENT PRIMARY KEY
	, TITLE VARCHAR(50) NOT NULL
	, CONTENT VARCHAR(100)
	, MEM_ID VARCHAR(50) REFERENCES BOARD_MEMBER (MEM_ID) -- 외래키
	, CREATE_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- 게시글 임시데이터
INSERT INTO board (BOARD_NUM, TITLE, CONTENT, MEM_ID) 
VALUES (1, '1번글', '1번 내용', 'java');
INSERT INTO board (BOARD_NUM, TITLE, CONTENT, MEM_ID) 
VALUES (2, '2번글', '2번 내용', 'admin');
INSERT INTO board (BOARD_NUM, TITLE, CONTENT, MEM_ID) 
VALUES (3, '3번글', '3번 내용', 'admin');

SELECT * FROM board;


-- 댓글 (회원만 가능)
CREATE TABLE BOARD_REPLY (
	REPLY_NUM INT AUTO_INCREMENT PRIMARY KEY
	, REPLY_CONTENT VARCHAR(50) NOT NULL
	, REPLY_DATE DATETIME DEFAULT CURRENT_TIMESTAMP
	, MEM_ID VARCHAR(50) REFERENCES BOARD_MEMBER (MEM_ID)
	, BOARD_NUM INT REFERENCES BOARD (BOARD_NUM)
);

-- 댓글 임시데이터
INSERT INTO board_reply (REPLY_NUM, REPLY_CONTENT, MEM_ID, BOARD_NUM)
VALUES (1, '댓글1', 'admin', 1);
INSERT INTO board_reply (REPLY_NUM, REPLY_CONTENT, MEM_ID, BOARD_NUM)
VALUES (2, '댓글2', 'admin', 2);
INSERT INTO board_reply (REPLY_NUM, REPLY_CONTENT, MEM_ID, BOARD_NUM)
VALUES (3, '댓글3', 'admin', 1);
INSERT INTO board_reply (REPLY_NUM, REPLY_CONTENT, MEM_ID, BOARD_NUM)
VALUES (4, '댓글4', 'admin', 1);
INSERT INTO board_reply (REPLY_NUM, REPLY_CONTENT, MEM_ID, BOARD_NUM)
VALUES (5, '댓글5', 'admin', 2);

-- 데이터 조회 연습
-- 회원의 이름이 '김자바'인 회원이 작성한 게시글의
-- 글번호, 제목, 작성자 아이디, 작성자 이름을 조회,
-- 작성일 기준 최신 글부터 조회(내림차순)

SELECT BOARD_NUM, TITLE, MEM_ID, MEM_NAME
FROM board B, board_member M
WHERE B.MEM_ID = M.MEM_ID AND MEM_NAME = '김자바'
ORDER BY CREATE_DATE DESC;

-- 모든 게시글의 글번호, 글 제목, 작성자 및 해당 글에 작성된
-- 댓글의 댓글 내용, 댓글 작성자, 댓글 작성일을 조회
-- 게시글 번호 기준 최신순으로 정렬 후
-- 같은 게시글에 대한 댓글은 가장 최근에 달린 댓글 순으로 조회
SELECT B.BOARD_NUM, TITLE, B.MEM_ID
	, REPLY_CONTENT, MEM_ID, REPLY_DATE
FROM board B, board_reply R
WHERE B.BOARD_NUM = R.MEM_ID
-- ORDER BY CREATE_DATE DESC;
ORDER BY BOARD_NUM DESC, REPLY_NUM DESC;

SELECT BOARD_NUM, TITLE, MEM_ID
FROM board;



WHERE BOARD_NUM = 3;

SELECT BOARD_NUM
FROM board;

SELECT title
FROM BOARD
WHERE BOARD_NUM = 3;

SELECT MEM_ID, MEM_NAME
FROM board_member
WHERE MEM_ID = 3;

SELECT title
FROM board;

SELECT BOARD_NUM
	,TITLE
	, CONTENT
	, MEM_ID
	, CREATE_DATE
FROM board
WHERE BOARD_NUM = 1;

SELECT * FROM board_reply;

SELECT REPLLY_NUM
	, REPLY_CONTENT
	, MEM_ID
	, REPLY_DATE
FROM board_reply
WHERE BOARD_NUM = 1;

SELECT * FROM board_member;
SELECT * FROM board;
SELECT * FROM board_reply;

-- 아이디가 'JAVA'인 회원이 작성한 게시글의
-- 글제목, 내용, 작성자ID, 작성자명, 작성자의 권한을 조회

SELECT TITLE
	, CONTENT
	, B.MEM_ID
	, M.MEM_ID
	, MEM_NAME
	, MEM_ROLE
FROM board B, board_member M
WHERE B.MEM_ID = M.MEM_ID AND B.MEM_ID = 'admin';

-- 글 번호가 5번 이하인 게시글의
-- 글 번호, 제목, 글 작성자를 조회하되
-- 글 번호 기준 오름차순으로 정렬
SELECT BOARD_NUM
	, TITLE
	, MEM_NAME
FROM board B, board_member M
WHERE B.MEM_ID = M.MEM_ID AND B.BOARD_NUM <= 5
ORDER BY B.BOARD_NUM;

-- 1번 게시글의 게시글 제목, 작성자 아이디 및
-- 1번 게시글에 작성된 댓글 내용, 댓글 작성자 아이디를 조회
SELECT TITLE
	, B.MEM_ID
	, REPLY_CONTENT
	, R.MEM_ID
FROM board B, board_reply R
WHERE B.BOARD_NUM = R.BOARD_NUM AND B.BOARD_NUM = 1;

-- 1번 게시글의 제목, 작성자 아이디 및
-- 1번 게시글에 작성된 댓글 내용, 댓글 작성자 아이디, 댓글 작성자 이름을 조회
SELECT TITLE
	, B.MEM_ID
	, REPLY_CONTENT
	, R.MEM_ID
	, M.MEM_ID
FROM board B, board_member M, board_reply R
WHERE M.MEM_ID = B.MEM_ID AND B.BOARD_NUM = R.BOARD_NUM AND B.BOARD_NUM=1;

-- 게시글 번호, 게시글 제목, 게시글 작성자
-- 게시글 작성일, 게시글 내용
-- 댓글 달린 날짜, 댓글 작성자 아이디, 댓글 내용
SELECT B.BOARD_NUM, TITLE, B.MEM_ID
	, CREATE_DATE, CONTENT
	, REPLY_DATE, R.MEM_ID, REPLY_CONTENT
FROM board B, board_reply R
WHERE B.BOARD_NUM = R.BOARD_NUM
AND B.BOARD_NUM=2;

SELECT * FROM board_member;

DROP TABLE TEST_ORDER;
DROP TABLE TEST_ITEM;

CREATE TABLE TEST_ITEM (
	ITEM_CODE INT AUTO_INCREMENT PRIMARY KEY
	, ITEM_NAME VARCHAR(30) NOT NULL
);
INSERT INTO TEST_ITEM VALUES (1, '상품1');
INSERT INTO TEST_ITEM VALUES (2, '상품2');
INSERT INTO TEST_ITEM VALUES (3, '상품3');
SELECT * FROM TEST_ITEM;

CREATE TABLE TEST_ORDER (
	ORDER_NUM INT AUTO_INCREMENT PRIMARY KEY
	, BUYER VARCHAR(50) NOT NULL
	, ITEM_CODE INT NOT NULL REFERENCES TEST_ITEM (ITEM_CODE) ON DELETE CASCADE
);

INSERT INTO TEST_ORDER VALUES (1, 'ADMIN', 1);
INSERT INTO TEST_ORDER VALUES (2, 'JAVA', 1);
INSERT INTO TEST_ORDER VALUES (3, 'C++', 2);
INSERT INTO TEST_ORDER VALUES (4, 'MAY', 3);

SELECT * FROM TEST_ITEM;
SELECT * FROM TEST_ORDER;
DELETE FROM TEST_ITEM WHERE ITEM_CODE = 1;

SELECT BOARD_NUM
	, TITLE
	, MEM_ID
	, CREATE_DATE
FROM board
WHERE ${searchType} LIKE CONCAT('%', #{searchKeyword}, '%');